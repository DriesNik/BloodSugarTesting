
<head>
    <title>Google Calendar API Quickstart</title>
    <meta charset='utf-8' />
</head>
<body>
    <p>Google Calendar API Quickstart</p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize-button" style="display: none;">Authorize</button>
    <button id="signout-button" style="display: none;">Sign Out</button>

    @*<pre id="content"></pre>*@
    <div id="Path">

    </div>

    
    <div>
        
        <label for="Bs">Blood Sugar:</label>
        <input type="text" id="blood" name="BloodSugar" value="" />
    </div>
    <div>
        <button onclick="newEvent()" type="submit" id="blood" class="btn btn-default">Submit Blood Sugar Number</button>
    </div>

    <div>
       
    </div>
    <script type="text/javascript">
      // Client ID and API key from the Developer Console
        var CLIENT_ID = '359173490060-648im88guobnnhdb2hoqf3e7taqbrvhr.apps.googleusercontent.com';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar";

      var authorizeButton = document.getElementById('authorize-button');
      var signoutButton = document.getElementById('signout-button');

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          discoveryDocs: DISCOVERY_DOCS,
          clientId: CLIENT_ID,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
          if (isSignedIn) {

          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

      function newCalendar() {
          var request = gapi.client.calendar.calendars.insert({
              "resource":
                    {

                        "summary": "Blood Sugar Numbers",
                        "description": "nope",
                        "timezone": "America/Chicago"
                    }
          });
          //alert(request);
          request.execute(function (response) {
              console.log(response);
          });
      }

      function newEvent() {
          var x = document.getElementById("blood").value;
          console.log(x);
          var request = gapi.client.calendar.events.insert({
              "calendarId": "fb7ei8c6qvhl74q4iioc36gh00@group.calendar.google.com",
              "start": {
                  "dateTime":(new Date()).toISOString(),
                  "timezone": "America/Chicago"
                },
              "end": {
                  "dateTime":(new Date()).toISOString(),
                  "timezone": "America/Chicago"
              },
              "summary": x,
              "description": "nope",

          });
          //alert(request);
          request.execute(function (response) {
              console.log(response)
          });
      }
      function testThis() {




              var url = "https://www.googleapis.com/calendar/v3/users/me/calendarList";
              $.ajax({
                  type: 'GET',
                  data: {},
                  url: url,
                  dataType: 'json',
                  scope: 'https://www.googleapis.com/auth/calendar',
                  success: function (data) {

                      console.log(data);

                      var petfinder = data.petfinder;


                  },
                  error: function (request, error) {
                      console.log(request, error);
                  }
              });
          };



    </script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://apis.google.com/js/api.js"></script>
    <script async defer src="https://apis.google.com/js/api.js"
            onload="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
</body>
